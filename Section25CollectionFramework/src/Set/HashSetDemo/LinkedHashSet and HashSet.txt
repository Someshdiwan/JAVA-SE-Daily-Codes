Understanding LinkedHashSet and HashSet in Java

1. What is a Set in Java?

A Set in Java is a collection that does not allow duplicate elements and typically offers efficient operations
for adding, removing, and checking for element existence.

The most commonly used implementations are HashSet and LinkedHashSet.

---

1. HashSet

Definition: HashSet is a collection based on a HashMap that stores unique elements but does **not maintain insertion order.

Characteristics
- Unordered collection**: Elements are stored based on their hash codes, meaning their order may change over time.
- Fast operations: O(1) average time complexity for insertions, deletions, and lookups.
- No duplicates: Automatically removes duplicate values.
- Allows null: A HashSet can contain a null value.

Use Cases
- When order does not matter.
- When fast operations (insertion, deletion, search) are required.
- When working with large data sets that need efficient membership checks.

---

2. LinkedHashSet:

Definition: LinkedHashSet is a subclass of HashSet that maintains insertion order using a doubly linked list internally.

Characteristics:
- Ordered collection: Elements are stored **in the order they were inserted.
- Slower than HashSet: Due to extra memory usage for maintaining order.
- Fast operations: Still has O(1) average time complexity for insertions, deletions, and lookups.
- No duplicates: Just like HashSet, it does not allow duplicate elements.

Use Cases:

- When order matters (e.g., processing elements in the same order they were inserted).
- When maintaining uniqueness** while keeping elements sorted by insertion.
- When working with cache implementations that rely on access order.

---

## 3. Differences Between HashSet and LinkedHashSet:

| Feature              | HashSet                     | LinkedHashSet                                 |
|----------------------|-----------------------------|-----------------------------------------------|
|   Ordering           | No ordering (unordered)     | Maintains insertion order                     |
|   Performance        | Slightly faster (O(1))      | Slightly slower (due to linked list overhead) |
|   Internal Structure | Uses a HashMap internally   | Uses a HashMap + Linked List internally       |
|   Use Case           | When order is not important | When order of elements matters                |

---

4. When to Use Which?

- Use HashSet when you just need a unique collection and do not care about order.
- Use LinkedHashSet when you need a unique collection but also want to maintain insertion order.

Real-World Examples:

- HashSet: Storing unique usernames in a database without worrying about the order.
- LinkedHashSet: Maintaining a list of recently visited web pages in the order they were accessed.