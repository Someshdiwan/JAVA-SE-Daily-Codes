Hash table and linked list implementation of the Set interface, with well-defined encounter order.
This implementation differs from HashSet in that it maintains a doubly-linked list running through all of its entries.
This linked list defines the encounter order (iteration order), which is the order in which elements were inserted into the set (insertion-order).

The least recently inserted element (the eldest) is first, and the youngest element is last.

Note that encounter order is not affected if an element is re-inserted into the set with the add method.

(An element e is reinserted into a set s if s. add(e) is invoked when s. contains(e) would return true immediately prior to the invocation.)

The reverse-ordered view of this set is in the opposite order, with the youngest element appearing first and the eldest element appearing last.

The encounter order of elements already in the set can be changed by using the addFirst and addLast methods.

This technique is particularly useful if a module takes a set on input, copies it, and later returns results whose order is determined by that of the copy.
(Clients generally appreciate having things returned in the same order they were presented.)

This class provides all of the optional Set and SequencedSet operations, and it permits null elements.

Like HashSet, it provides constant-time performance for the basic operations (add, contains and remove), assuming the hash function disperses elements
properly among the buckets.

Performance is likely to be just slightly below that of HashSet, due to the added expense of maintaining the linked list,

with one exception: Iteration over a LinkedHashSet requires time proportional to the size of the set, regardless of its capacity.

Iteration over a HashSet is likely to be more expensive, requiring time proportional to its capacity.

A linked hash set has two parameters that affect its performance: initial capacity and load factor.

They are defined precisely as for HashSet. Note, however, that the penalty for choosing an excessively high value for initial capacity is
less severe for this class than for HashSet, as iteration times for this class are unaffected by capacity.

Note that this implementation is not synchronized. If multiple threads access a linked hash set concurrently, and at least one of the threads
modifies the set, it must be synchronized externally. This is typically accomplished by synchronizing on some object that naturally encapsulates the set.

If no such object exists, the set should be "wrapped" using the Collections. synchronizedSet method.

This is best done at creation time, to prevent accidental unsynchronized access to the set:
    Set s = Collections. synchronizedSet(new LinkedHashSet(...));