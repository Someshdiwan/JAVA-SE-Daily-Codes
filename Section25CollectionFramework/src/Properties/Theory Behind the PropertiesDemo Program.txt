Theory Behind the `PropertiesDemo` Program

#### **1. Introduction to `Properties` Class**
- The `Properties` class in Java is a subclass of `Hashtable` used to store key-value pairs.
- It is mainly used to store **configuration settings**, **metadata**, or **application properties**.
- Properties are typically stored in `.properties` or `.xml` files.

#### **2. Setting Properties**
- The `setProperty(String key, String value)` method is used to add key-value pairs to the `Properties` object.
- In this case, the properties include:
  - `"Brand Name"` → `"Dell"`
  - `"Processor"` → `"i7"`
  - `"OS"` → `"Windows"`
  - `"Model"` → `"Latitude"`

#### **3. Storing Properties in a Text File**
- The `store(OutputStream out, String comments)` method saves the properties in a **text file**.
- The file format follows:
  ```
  # laptop
  # Sun Mar 09 01:16:17 IST 2025
  Brand Name: =Dell
  Processor: =i7
  OS: =Windows
  Model: =Latitude
  ```
- The first line is a **comment** added by the user, followed by auto-generated metadata (like date & time).

#### **4. Storing Properties in an XML File**
- The `storeToXML(OutputStream os, String comment)` method saves properties in **XML format**.
- The output file follows:
  ```xml
  <?xml version="1.0" encoding="UTF-8"?>
  <!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
  <properties>
      <comment>Properties XML File</comment>
      <entry key="Brand Name: ">Dell</entry>
      <entry key="Processor: ">i7</entry>
      <entry key="OS: ">Windows</entry>
      <entry key="Model: ">Latitude</entry>
  </properties>
  ```
- This format is **structured**, making it easy to **parse and read**.

#### **5. Printing Properties to Console**
- The `System.out.println(p);` statement prints all key-value pairs.

#### **6. Use Cases of `Properties`**
- Used for **storing configuration files** in Java applications.
- Commonly used in **database configuration**, **logging settings**, and **internationalization**.
- XML-based properties files are useful for **cross-platform compatibility**.

#### **7. Potential Issues**
- **Keys with spaces and colons (`:`) may cause XML formatting issues**.
- **Incorrect file paths** may lead to a `FileNotFoundException`.
- **Manual property retrieval requires casting** since `Properties` extends `Hashtable<String, String>`.

### **Conclusion**
The `Properties` class provides an efficient way to **store, modify, and retrieve configuration settings** in Java applications. By using both **text** and **XML** storage, it ensures flexibility and compatibility across different environments.