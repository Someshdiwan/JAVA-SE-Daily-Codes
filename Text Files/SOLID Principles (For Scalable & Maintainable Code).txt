1. SOLID Principles (For Scalable & Maintainable Code):  

SOLID is a set of design principles for writing clean and maintainable code: 
 
-   S â€“ Single Responsibility Principle (SRP)**: A class should have only one reason to change.  
-   O â€“ Open/Closed Principle (OCP): Code should be open for extension, but closed for modification.  
-   L â€“ Liskov Substitution Principle (LSP): Subclasses should be interchangeable with their parent classes without breaking functionality.  
-   I â€“ Interface Segregation Principle (ISP): No class should be forced to implement unused methods.  
-   D â€“ Dependency Inversion Principle (DIP): High-level modules should not depend on low-level modules. Both should depend on abstractions.  

---

2. Multithreading & Concurrency:  

Used for executing multiple tasks simultaneously to improve performance. 
 
- Thread: A lightweight process.  
- Concurrency: Multiple tasks start and finish in overlapping time periods (e.g., async tasks).  
- Parallelism: Multiple tasks run at the exact same time (requires multiple CPU cores).  
- Synchronization: Ensures multiple threads donâ€™t modify shared data inconsistently (**e.g., `synchronized` keyword**).  
- Thread Pooling: Reuses a fixed number of threads for efficiency (e.g., ExecutorService).  

Example: A banking system where multiple users transfer money simultaneously.  

---

3. Design Patterns (Reusable Code Solutions):  

Common solutions to recurring software design problems:  

- Singleton: Ensures only one instance of a class exists (e.g., logging, configuration).  
- Factory: Creates objects without exposing object creation logic** (e.g., JDBC driver factory).  
- Observer: A subject notifies multiple listeners when an event occurs (e.g., event-driven systems).  
- Builder: Used to create complex objects step by step (e.g., constructing a `Person` object with optional fields).  

---

4. Database Design (SQL vs NoSQL, Indexing, Normalization):  

  - SQL (Relational): Uses structured tables and follows ACID properties (Atomicity, Consistency, Isolation, Durability).  
  - Examples: MySQL, PostgreSQL.  

  - Best for structured data like banking systems.  
  - NoSQL (Non-relational): Uses key-value, document, or graph storage (**BASE** properties â€“ Basically Available, Soft state, Eventually consistent).  
  
  - Examples: MongoDB, Cassandra, Redis.  

  - Best for scalability and unstructured data like social media.  
  - Indexing: Speeds up search queries (e.g. B-tree, Hash Index).  
  - Normalization: Reduces redundancy by dividing data into multiple related tables.  

---

5. Microservices & REST APIs:

  - Microservices: Breaking a large system into small independent services that communicate via APIs.  
  - Advantages: Scalability, easier maintenance, faster deployment.  
  - Challenges: Network latency, service discovery, security.  
  - REST APIs: (Representational State Transfer): A web service standard using **HTTP methods (GET, POST, PUT, DELETE).  
  - Stateless: No client session stored on the server.  
  - Scalable: Works with multiple clients (mobile, web, etc.).  

---

6. Caching & Load Balancing (Performance Optimization):

  - Caching: Storing frequently accessed data in memory to improve speed.  
  - Example: Redis, Memcached.  
  
  - Types:  
  - Application cache (e.g., Spring Boot `@Cacheable`)  
  - Database cache (e.g., Query caching in MySQL)  
  - CDN cache (e.g., Cloudflare, Akamai for static files like images).  
  - Load Balancing: Distributes traffic across multiple servers to avoid overload.  
  
  - Types:  
  - Round Robin â€“ Sends requests to each server sequentially.  
  - Least Connections â€“ Routes requests to the server with the fewest connections.  
  - IP Hashing â€“ Assigns users to a specific server based on IP.  

---



1. SOLID Principles (Scalable & Maintainable Code)
SOLID principles help write clean, modular, and extensible code:

S: Single Responsibility Principle (SRP) â€“ A class should have one job.
O: Open/Closed Principle (OCP) â€“ Code should be open for extension, closed for modification.
L: Liskov Substitution Principle (LSP) â€“ Subclasses should replace base classes without issues.
I: Interface Segregation Principle (ISP) â€“ Interfaces should be small & specific, not large & general.
D: Dependency Inversion Principle (DIP) â€“ Depend on abstractions, not concrete classes.
ðŸ”¹ Example: Instead of modifying an existing PaymentProcessor class, we can extend it with new payment types (CreditCard, PayPal) following OCP.

2. Multithreading & Concurrency
This helps execute multiple tasks at the same time, improving performance.

Thread: A lightweight process executing a task.
Concurrency: Multiple tasks appear to run simultaneously.
Parallelism: Multiple tasks actually run at the same time on different cores.
Synchronization: Prevents race conditions (e.g., using synchronized, volatile, Locks).
ðŸ”¹ Example: In a banking app, multiple users transferring money at the same time must be handled without data corruption.

3. Design Patterns
Common solutions for software design problems:

Singleton â€“ Ensures one instance of a class (e.g., Database connection).

Factory â€“ Creates objects without exposing logic (e.g., VehicleFactory for Cars & Bikes).

Observer â€“ One object notifies multiple listeners when data changes (e.g., notifications in apps).

Strategy â€“ Enables dynamic behavior changes (e.g., different sorting algorithms).

ðŸ”¹ Example: Using Singleton for a Logger ensures all parts of the app use the same logging instance.

4. Database Design (SQL vs NoSQL)

Databases store and organize data efficiently:

SQL (Relational DB) â€“ Uses structured tables (MySQL, PostgreSQL). Good for structured data.
NoSQL (Non-Relational DB) â€“ Uses flexible documents, key-value, or graph-based storage (MongoDB, Redis). Good for unstructured data.
Normalization â€“ Breaking down tables to avoid redundancy.