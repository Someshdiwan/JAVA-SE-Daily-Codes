âœ… Understanding Stateful and Stateless Operations in Java Streams

In Java Streams, operations are classified as either stateless or stateful based on how they process the data and whether they require maintaining state across elements.

---

ðŸ“Œ 1. Stateless Operations

These operations process each element independently, without relying on the elements before or after it. They do not maintain any internal state.

Examples of Stateless Operations:
- filter(Predicate) â€“ Filters elements based on a condition.
- map(Function) â€“ Transforms each element.
- flatMap(Function) â€“ Flattens nested collections.
- peek(Consumer) â€“ Performs an action on each element.
- forEach(Consumer) â€“ Iterates over elements.

âœ… Example: Stateless Operations

List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);

numbers.stream()
       .filter(x -> x % 2 == 0)  // Stateless
       .map(x -> x * 2)          // Stateless
       .forEach(System.out::println);
```

Output:

4
8


ðŸ‘‰ Why Stateless?

Each element is processed independently without needing to track previous elements.


ðŸ“Œ 2. Stateful Operations

These operations require keeping track of previously seen elements or working on the entire stream before producing output. They may require buffering or sorting.

Examples of Stateful Operations:

- distinct() â€“ Removes duplicate elements.
- sorted() â€“ Sorts the elements.
- limit(n) â€“ Returns the first n elements.
- skip(n) â€“ Skips the first n elements.
- collect() â€“ Collects results into a collection.
- reduce() â€“ Reduces all elements to a single value.


âœ… Example: Stateful Operations

List<Integer> numbers = Arrays.asList(5, 3, 7, 1, 5, 3);

numbers.stream()
       .distinct()           // Stateful (removes duplicates)
       .sorted()             // Stateful (requires sorting the whole stream)
       .forEach(System.out::println);
```

Output:
1
3
5
7

ðŸ‘‰ Why Stateful?

- distinct() needs to track seen elements to remove duplicates.  
- sorted() needs to process the entire stream to return elements in order.

ðŸ“Œ 3. Why Does It Matter?
1. Performance Considerations:
   - Stateless operations are faster and work element-by-element.
   - Stateful operations may require buffering and increase memory usage.
2. Parallel Streams:
   - Stateless operations are better suited for parallel execution.
   - Stateful operations may require synchronization and degrade performance in parallel streams.

âœ… Example: Parallel with Stateful vs. Stateless

List<Integer> nums = Arrays.asList(1, 2, 3, 4, 5, 6);

// Stateless works well in parallel
nums.parallelStream().filter(x -> x % 2 == 0).forEach(System.out::println);

// Stateful may disrupt order in parallel
nums.parallelStream().sorted().forEach(System.out::println);